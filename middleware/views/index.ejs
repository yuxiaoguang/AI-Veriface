<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="best" content="Best">
    <title>人脸识别</title>
    <style>
        * {
            margin: 0;
            padding: 0;
        }

        html, body {
            height: 100%;
            background: #f9f9f9;
        }

        body {
            display: flex;
            /*弹性布局,用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。
                       子元素的float、clear和vertical-align属性将失效。http://blog.csdn.net/u011300580/article/details/56011564*/
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .veriface {
            width: 800px;
            height: 500px;
            background-color: #FFFFFF;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
        }

        .veriface .capture {
            display: block;
            width: 760px;
            height: 360px;
            background-color: #222222;
        }

        .veriface .control {
            display: flex;
            flex-direction: row;
            justify-content: space-around;
            align-items: center;
            width: 100%;
            height: 70px;
        }

        .veriface .control span {
            width: 100px;
            height: 45px;
            background: #F9F9F9;
            text-align: center;
            line-height: 45px;
            color: #222222;
            font-size: 12px;
            border-radius: 8px;
            box-shadow: 0 0 4px #cccccc;
            user-select: none;
            cursor: pointer;
            transition: 1s;
        }

        .veriface .control span:hover {
            background-color: #e6e6e6;
        }

        .veriface h3.notice {
            color: #336688;
        }
        .draw_img{
            position: fixed;
            bottom: 0px;
            left: 0px;
        }
    </style>
</head>
<body>
<canvas class="draw_img" width="300" height="200"></canvas>
<div class="veriface" style="margin-top: 3px">
    <video class="capture" width="760" height="360" src=""></video>
    <h3 class="notice">把脸放过来</h3>
    <div class="control">
        <span class="open">开启摄像头</span>
        <span class="recognition">人脸识别</span>
        <span class="detectPerson">年龄分析</span>
        <span class="add">新增人脸库</span>
        <span class="search">查找人脸</span>
        <span class="refresh">刷新</span>
        <span class="close">关闭摄像头</span>
    </div>
</div>
<script>
    let open = document.querySelector('.open');
    let capture = document.querySelector('.capture');
    let recognition = document.querySelector('.recognition');
    let detectPerson = document.querySelector('.detectPerson');
    let add = document.querySelector('.add');
    let search = document.querySelector('.search');
    let refresh = document.querySelector('.refresh');

    let close = document.querySelector('.close');
    let notice = document.querySelector('.notice');
    let canvas = document.querySelector('.draw_img');
    let context = canvas.getContext('2d');
    let buffer;

    open.onclick = invokingCamera;
    recognition.onclick = matchScreenShot;
    detectPerson.onclick = detectScreenShot;
    add.onclick = addHandle;
    search.onclick = searchHandle;
    refresh.onclick = refreshHandle;
    close.onclick = function () {
        //console.log(buffer);
        buffer && buffer.getTracks()[0].stop();
        //console.log(buffer);
    }
    //获取摄像头,获取流媒体数据
    function invokingCamera() {
        if (navigator.mediaDevices.getUserMedia) {
            //优先使用前置摄像头
            navigator.mediaDevices.getUserMedia({audio: false, video: {facingMode: "user"}}).then(
                //获取视频流数据 成功后
                function (MediaStream) {
                    //console.log(stream);
                    buffer = MediaStream; //会指向一个内存地址
                    //console.log(buffer);
                    capture.srcObject = MediaStream;
                    capture.onloadedmetadata = function(e) {
                        capture.play();
                    };
                }
            ).catch(
                //失败后
                function (err) {
                    console.log(err.name + ": " + err.message);
                }
            );
        } else {
            alert('您的浏览器不支持摄像头');
        }
    }

    function matchScreenShot() {
        msg('正在检测,请稍后~~~', '#c665ff');
        context.drawImage(capture,0,0,200,150);
        new Post({
            url: '/match',
            data: {img: canvas.toDataURL('image/png')},
            success: function (res) {
                res = res.result.score;
                if (res > 85) {
                    msg('欢迎主人~', '#7ef6c7');
                } else {
                    msg('丑拒~~', '#f10d0f');
                }
            }
        })
    }

    function detectScreenShot() {
        msg('正在检测,请稍后~~~', '#c665ff');
        context.drawImage(capture,0,0,200,150);
        new Post({
            url: '/detect',
            data: {img: canvas.toDataURL('image/png')},
            success: function (res) {
                const age = res.result.face_list[0].age;
                msg('年龄分析: ' + age + ' 岁', '#7ef6c7');
            }
        })
    }

    function addHandle() {
        msg('更新人脸库~~~', '#c665ff');
        context.drawImage(capture,0,0,200,150);
        new Post({
            url: '/add',
            data: {img: canvas.toDataURL('image/png'), group_id: '1', user_id: '1', user_info: '{name: "yuxiaoguang", age: 28, sex: "male"}'},
            success: function (res) {
                if(res.error_code ==0 && res.error_msg == 'SUCCESS'){
                    msg('新增成功', '#7ef6c7');
                }
            }
        })
    }

    function searchHandle() {
        msg('正在查找人脸库~~~', '#c665ff');
        context.drawImage(capture,0,0,200,150);
        new Post({
            url: '/search',
            data: {img: canvas.toDataURL('image/png'), group_id_list: 'Middleware_Product'},
            success: function (res) {
                if(res.error_code ==0 && res.error_msg == 'SUCCESS'){
                    alert(res.result.user_list[0].user_info);
                }
            }
        })
    }

    function msg(con, color) {
        notice.innerHTML = con + '';
        notice.style.color = color;
    }

    function Post(opt) {
        this.init(opt);
    }

    function refreshHandle() {
        new Post({
            url: '/access',
            data:'',
        });
    }

    Post.prototype = {
        init: function (opt) {
            this.url = opt.url || '';
            this.data = opt.data || {};
            this.method = 'POST';
            this.async = true;
            this.success = opt.success || function () {

            }
            this.fail = opt.fail || function (error) {
                alert('【' + error.error_code + '】'+ error.error_msg);
            }
            this.xhr();
        },
        xhr: function () {
            let that = this;
            let xhr = new XMLHttpRequest();
            xhr.open(this.method, this.url, this.async);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
            let queryStr = [];
            for(d in this.data){
                queryStr.push(d + '=' + this.data[d]);
            }
            xhr.send(queryStr.join('&'));
            xhr.onreadystatechange = function (ev) {
                let result = {};
                if(xhr.response && typeof xhr.response === 'string') result = JSON.parse(xhr.response);
                if (xhr.status === 200 && xhr.readyState === 4) {
                    if(result && result.error_code > 0) return this.fail(result);
                    this.success(result);
                }
            }.bind(this);
        }
    }

    new Post({
        url: '/access',
        data:'',
    });

</script>
</body>
</html>
